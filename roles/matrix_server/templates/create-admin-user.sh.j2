#!/bin/bash
# Matrix admin user creation script
# Generated by Ansible

set -euo pipefail

# Configuration
MATRIX_USER="{{ admin_username | default('admin') }}"
MATRIX_PASSWORD="{{ admin_user_password | default('') }}"
MATRIX_HOME_SERVER="{{ matrix_homeserver_name | default('localhost') }}"
SYNAPSE_CONFIG="{{ matrix_synapse_config_path | default('/etc/matrix-synapse/homeserver.yaml') }}"
SYNAPSE_VENV="{{ matrix_synapse_venv | default('/opt/venvs/matrix-synapse') }}"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

log() {
    echo -e "${GREEN}[$(date '+%Y-%m-%d %H:%M:%S')]${NC} $1"
}

warn() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

check_matrix_running() {
    log "Checking if Matrix Synapse is running..."

    if ! systemctl is-active --quiet matrix-synapse; then
        error "Matrix Synapse is not running. Please start it first:"
        echo "  sudo systemctl start matrix-synapse"
        exit 1
    fi

    log "✓ Matrix Synapse is running"
}

check_database_connection() {
    log "Checking database connection..."

    if command -v sudo >/dev/null 2>&1; then
        if sudo -u postgres psql -d synapse -c "SELECT 1;" >/dev/null 2>&1; then
            log "✓ Database connection successful"
        else
            error "Cannot connect to Matrix database"
            exit 1
        fi
    else
        warn "Cannot check database connection (sudo not available)"
    fi
}

create_admin_user() {
    local username="$1"
    local password="$2"
    local homeserver="$3"

    log "Creating Matrix admin user: @$username:$homeserver"

    # Check if virtual environment exists
    if [ ! -d "$SYNAPSE_VENV" ]; then
        error "Matrix Synapse virtual environment not found at: $SYNAPSE_VENV"
        exit 1
    fi

    # Check if configuration file exists
    if [ ! -f "$SYNAPSE_CONFIG" ]; then
        error "Matrix Synapse configuration not found at: $SYNAPSE_CONFIG"
        exit 1
    fi

    # Create the admin user using synapse's register_new_matrix_user command
    log "Registering new admin user..."

    if [ -n "$password" ]; then
        # Use provided password
        echo "$password" | "$SYNAPSE_VENV/bin/python" -m synapse.app.admin_cmd \
            register_new_matrix_user \
            -c "$SYNAPSE_CONFIG" \
            -u "$username" \
            -p \
            --admin \
            "http://localhost:8008"
    else
        # Interactive password prompt
        "$SYNAPSE_VENV/bin/python" -m synapse.app.admin_cmd \
            register_new_matrix_user \
            -c "$SYNAPSE_CONFIG" \
            -u "$username" \
            --admin \
            "http://localhost:8008"
    fi

    if [ $? -eq 0 ]; then
        log "✓ Admin user created successfully!"
        log "User details:"
        echo "  Username: @$username:$homeserver"
        echo "  Type: Administrator"
        echo "  Server: $homeserver"
        echo ""
        log "You can now log in to your Matrix server with these credentials."
    else
        error "Failed to create admin user"
        exit 1
    fi
}

verify_user_creation() {
    local username="$1"
    local homeserver="$2"

    log "Verifying user creation..."

    # Query the database to check if user exists and is admin
    if command -v sudo >/dev/null 2>&1; then
        local user_check
        user_check=$(sudo -u postgres psql -d synapse -t -c \
            "SELECT admin, deactivated FROM users WHERE name = '@$username:$homeserver';" 2>/dev/null | xargs)

        if [ -n "$user_check" ]; then
            local admin_status=$(echo "$user_check" | cut -d' ' -f1)
            local deactivated=$(echo "$user_check" | cut -d' ' -f2)

            if [ "$admin_status" = "1" ] || [ "$admin_status" = "t" ]; then
                log "✓ User has admin privileges"
            else
                warn "User exists but does not have admin privileges"
            fi

            if [ "$deactivated" = "0" ] || [ "$deactivated" = "f" ]; then
                log "✓ User account is active"
            else
                warn "User account is deactivated"
            fi
        else
            warn "Could not verify user creation in database"
        fi
    fi
}

show_usage() {
    echo "Usage: $0 [username] [password]"
    echo ""
    echo "Create a Matrix admin user for the homeserver."
    echo ""
    echo "Arguments:"
    echo "  username    Matrix username (without @domain)"
    echo "  password    User password (optional, will prompt if not provided)"
    echo ""
    echo "Examples:"
    echo "  $0 admin"
    echo "  $0 admin mypassword"
    echo "  $0"
    echo ""
    echo "Configuration:"
    echo "  Homeserver: $MATRIX_HOME_SERVER"
    echo "  Config: $SYNAPSE_CONFIG"
    echo "  Virtual Env: $SYNAPSE_VENV"
}

main() {
    # Parse arguments
    local username="${1:-$MATRIX_USER}"
    local password="${2:-$MATRIX_PASSWORD}"

    # Show usage if requested
    if [ "${1:-}" = "-h" ] || [ "${1:-}" = "--help" ]; then
        show_usage
        exit 0
    fi

    # Prompt for username if not provided
    if [ -z "$username" ]; then
        echo -n "Enter Matrix username (without @domain): "
        read -r username
    fi

    # Validate username
    if [ -z "$username" ]; then
        error "Username cannot be empty"
        exit 1
    fi

    log "Matrix Admin User Creation"
    log "=========================="
    log "Homeserver: $MATRIX_HOME_SERVER"
    log "Username: @$username:$MATRIX_HOME_SERVER"
    log ""

    # Perform checks
    check_matrix_running
    check_database_connection

    # Create the user
    create_admin_user "$username" "$password" "$MATRIX_HOME_SERVER"

    # Verify creation
    verify_user_creation "$username" "$MATRIX_HOME_SERVER"

    log "Admin user creation completed successfully!"
}

main "$@"