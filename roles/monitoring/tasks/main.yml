---
- name: Install monitoring packages
  apt:
    name:
      - htop
      - iotop
      - nethogs
      - iftop
      - ncdu
      - sysstat
      - logwatch
      - logrotate
      - rsyslog
      - mailutils
      - postfix
      - curl
      - wget
      - jq
    state: present
    update_cache: yes

- name: Create monitoring user and group
  group:
    name: "{{ node_exporter_group }}"
    state: present
  when: node_exporter_enabled

- name: Create monitoring user
  user:
    name: "{{ node_exporter_user }}"
    group: "{{ node_exporter_group }}"
    system: yes
    shell: /bin/false
    home: /var/lib/prometheus
    createhome: no
  when: node_exporter_enabled

- name: Create monitoring directories
  file:
    path: "{{ item }}"
    state: directory
    owner: root
    group: root
    mode: '0755'
  loop:
    - /var/log/monitoring
    - /opt/monitoring
    - /etc/monitoring

- name: Download and install Node Exporter
  block:
    - name: Download Node Exporter
      get_url:
        url: "https://github.com/prometheus/node_exporter/releases/download/v{{ node_exporter_version }}/node_exporter-{{ node_exporter_version }}.linux-amd64.tar.gz"
        dest: "/tmp/node_exporter-{{ node_exporter_version }}.linux-amd64.tar.gz"
        mode: '0644'

    - name: Extract Node Exporter
      unarchive:
        src: "/tmp/node_exporter-{{ node_exporter_version }}.linux-amd64.tar.gz"
        dest: /tmp
        remote_src: yes

    - name: Copy Node Exporter binary
      copy:
        src: "/tmp/node_exporter-{{ node_exporter_version }}.linux-amd64/node_exporter"
        dest: /usr/local/bin/node_exporter
        owner: root
        group: root
        mode: '0755'
        remote_src: yes

    - name: Create Node Exporter systemd service
      template:
        src: node_exporter.service.j2
        dest: /etc/systemd/system/node_exporter.service
        owner: root
        group: root
        mode: '0644'
      notify: restart node_exporter

    - name: Enable and start Node Exporter
      systemd:
        name: node_exporter
        enabled: yes
        state: started
        daemon_reload: yes
  when: node_exporter_enabled

- name: Configure system monitoring scripts
  template:
    src: "{{ item.src }}"
    dest: "{{ item.dest }}"
    owner: root
    group: root
    mode: '0755'
  loop:
    - { src: 'system-monitor.sh.j2', dest: '/usr/local/bin/system-monitor.sh' }
    - { src: 'security-monitor.sh.j2', dest: '/usr/local/bin/security-monitor.sh' }
    - { src: 'service-monitor.sh.j2', dest: '/usr/local/bin/service-monitor.sh' }
    - { src: 'disk-monitor.sh.j2', dest: '/usr/local/bin/disk-monitor.sh' }
    - { src: 'network-monitor.sh.j2', dest: '/usr/local/bin/network-monitor.sh' }

- name: Create monitoring cron jobs
  cron:
    name: "{{ item.name }}"
    minute: "{{ item.minute }}"
    hour: "{{ item.hour }}"
    job: "{{ item.job }}"
    user: root
  loop:
    - { name: "System monitoring", minute: "*/5", hour: "*", job: "/usr/local/bin/system-monitor.sh" }
    - { name: "Security monitoring", minute: "*/10", hour: "*", job: "/usr/local/bin/security-monitor.sh" }
    - { name: "Service monitoring", minute: "*/2", hour: "*", job: "/usr/local/bin/service-monitor.sh" }
    - { name: "Disk monitoring", minute: "*/15", hour: "*", job: "/usr/local/bin/disk-monitor.sh" }
    - { name: "Network monitoring", minute: "*/5", hour: "*", job: "/usr/local/bin/network-monitor.sh" }

- name: Configure logwatch
  template:
    src: logwatch.conf.j2
    dest: /etc/logwatch/conf/logwatch.conf
    owner: root
    group: root
    mode: '0644'
  when: logwatch_enabled

- name: Configure logrotate for custom logs
  template:
    src: monitoring-logrotate.j2
    dest: /etc/logrotate.d/monitoring
    owner: root
    group: root
    mode: '0644'
  when: logrotate_enabled

- name: Configure rsyslog for monitoring
  template:
    src: rsyslog-monitoring.conf.j2
    dest: /etc/rsyslog.d/50-monitoring.conf
    owner: root
    group: root
    mode: '0644'
  notify: restart rsyslog
  when: rsyslog_enabled

- name: Create alert notification script
  template:
    src: send-alert.sh.j2
    dest: /usr/local/bin/send-alert.sh
    owner: root
    group: root
    mode: '0755'

- name: Configure system performance monitoring
  template:
    src: sysstat.j2
    dest: /etc/default/sysstat
    owner: root
    group: root
    mode: '0644'
  notify: restart sysstat
  when: performance_monitoring_enabled

- name: Create monitoring dashboard script
  template:
    src: monitoring-dashboard.sh.j2
    dest: /usr/local/bin/monitoring-dashboard.sh
    owner: root
    group: root
    mode: '0755'

- name: Create health check script
  template:
    src: health-check.sh.j2
    dest: /usr/local/bin/health-check.sh
    owner: root
    group: root
    mode: '0755'

- name: Create monitoring status endpoint
  template:
    src: monitoring-status.py.j2
    dest: /usr/local/bin/monitoring-status.py
    owner: root
    group: root
    mode: '0755'

- name: Install Python dependencies for monitoring
  apt:
    name:
      - python3-psutil
      - python3-requests
    state: present

- name: Configure monitoring for Matrix services
  template:
    src: matrix-monitor.sh.j2
    dest: /usr/local/bin/matrix-monitor.sh
    owner: root
    group: root
    mode: '0755'

- name: Create Matrix monitoring cron job
  cron:
    name: "Matrix services monitoring"
    minute: "*/3"
    hour: "*"
    job: "/usr/local/bin/matrix-monitor.sh"
    user: root

- name: Configure firewall rules for monitoring
  ufw:
    rule: allow
    port: "{{ node_exporter_port }}"
    proto: tcp
    src: "{{ item }}"
    comment: "Node Exporter for {{ item }}"
  loop: "{{ monitoring_allowed_ips | default(['127.0.0.1']) }}"
  when: node_exporter_enabled

- name: Create monitoring summary report
  template:
    src: monitoring-report.sh.j2
    dest: /usr/local/bin/monitoring-report.sh
    owner: root
    group: root
    mode: '0755'

- name: Create daily monitoring report cron job
  cron:
    name: "Daily monitoring report"
    minute: "0"
    hour: "8"
    job: "/usr/local/bin/monitoring-report.sh"
    user: root