#!/bin/bash
# Health check script for Matrix server
# Generated by Ansible

set -euo pipefail

# Configuration
LOG_FILE="/var/log/monitoring/health-check.log"
ALERT_SCRIPT="/usr/local/bin/send-alert.sh"
EXIT_CODE=0

log() {
    echo "$(date '+%Y-%m-%d %H:%M:%S') - $1" | tee -a "$LOG_FILE"
}

alert() {
    local level="$1"
    local message="$2"
    log "$level: $message"
    if [ -x "$ALERT_SCRIPT" ]; then
        "$ALERT_SCRIPT" "$level" "$message" "health-check"
    fi
}

check_critical_services() {
    log "=== Checking Critical Services ==="
    local issues=0

    local services=(
        "matrix-synapse"
        "caddy"
        "postgresql"
        "redis-server"
{% if fail2ban_enabled | default(true) %}
        "fail2ban"
{% endif %}
        "ssh"
    )

    for service in "${services[@]}"; do
        if systemctl is-active --quiet "$service"; then
            log "✓ $service: Running"
        else
            log "✗ $service: STOPPED"
            alert "CRITICAL" "$service is not running"
            ((issues++))
        fi
    done

    return $issues
}

check_disk_space() {
    log "=== Checking Disk Space ==="
    local issues=0

    # Check root filesystem
    local disk_usage=$(df / | awk 'NR==2 {print $(NF-1)}' | sed 's/%//')

    if [ "$disk_usage" -gt 95 ]; then
        alert "CRITICAL" "Root filesystem at ${disk_usage}% capacity"
        ((issues++))
    elif [ "$disk_usage" -gt 90 ]; then
        alert "WARNING" "Root filesystem at ${disk_usage}% capacity"
        ((issues++))
    else
        log "✓ Root filesystem usage: ${disk_usage}%"
    fi

    return $issues
}

check_memory_usage() {
    log "=== Checking Memory Usage ==="
    local issues=0

    local mem_info=$(free | grep Mem)
    local mem_total=$(echo "$mem_info" | awk '{print $2}')
    local mem_used=$(echo "$mem_info" | awk '{print $3}')
    local mem_percent=$((mem_used * 100 / mem_total))

    if [ "$mem_percent" -gt 95 ]; then
        alert "CRITICAL" "Memory usage at ${mem_percent}%"
        ((issues++))
    elif [ "$mem_percent" -gt 90 ]; then
        alert "WARNING" "Memory usage at ${mem_percent}%"
        ((issues++))
    else
        log "✓ Memory usage: ${mem_percent}%"
    fi

    return $issues
}

check_matrix_health() {
    log "=== Checking Matrix Health ==="
    local issues=0

    # Check Matrix API endpoint
    if command -v curl >/dev/null 2>&1; then
        local response=$(curl -s -o /dev/null -w "%{http_code}" "http://localhost:8008/_matrix/federation/v1/version" 2>/dev/null || echo "000")

        if [ "$response" = "200" ]; then
            log "✓ Matrix API: Responding"
        else
            alert "CRITICAL" "Matrix API not responding (HTTP $response)"
            ((issues++))
        fi
    fi

    # Check database connection
    if command -v sudo >/dev/null 2>&1; then
        if sudo -u postgres psql -c "SELECT 1;" >/dev/null 2>&1; then
            log "✓ PostgreSQL: Connection OK"
        else
            alert "CRITICAL" "PostgreSQL connection failed"
            ((issues++))
        fi
    fi

    # Check Redis connection
    if command -v redis-cli >/dev/null 2>&1; then
        if redis-cli ping 2>/dev/null | grep -q "PONG"; then
            log "✓ Redis: Connection OK"
        else
            alert "WARNING" "Redis connection failed"
            ((issues++))
        fi
    fi

    return $issues
}

check_network_connectivity() {
    log "=== Checking Network Connectivity ==="
    local issues=0

    # Check external connectivity
    if ping -c 1 -W 5 8.8.8.8 >/dev/null 2>&1; then
        log "✓ External connectivity: OK"
    else
        alert "WARNING" "External connectivity failed"
        ((issues++))
    fi

    # Check DNS resolution
    if nslookup google.com >/dev/null 2>&1; then
        log "✓ DNS resolution: OK"
    else
        alert "WARNING" "DNS resolution failed"
        ((issues++))
    fi

    return $issues
}

check_security_status() {
    log "=== Checking Security Status ==="
    local issues=0

    # Check for excessive failed SSH attempts
    local failed_ssh=$(grep "Failed password" /var/log/auth.log 2>/dev/null | grep "$(date '+%b %d')" | wc -l)

    if [ "$failed_ssh" -gt 50 ]; then
        alert "CRITICAL" "$failed_ssh failed SSH attempts today"
        ((issues++))
    elif [ "$failed_ssh" -gt 20 ]; then
        alert "WARNING" "$failed_ssh failed SSH attempts today"
        ((issues++))
    else
        log "✓ SSH security: $failed_ssh failed attempts today"
    fi

    # Check UFW status
    if command -v ufw >/dev/null 2>&1; then
        if ufw status | grep -q "Status: active"; then
            log "✓ UFW firewall: Active"
        else
            alert "WARNING" "UFW firewall is inactive"
            ((issues++))
        fi
    fi

    return $issues
}

check_certificates() {
    log "=== Checking SSL Certificates ==="
    local issues=0

    # Check Matrix domain certificate
    local matrix_domain="{{ matrix_homeserver_name | default('localhost') }}"

    if [ "$matrix_domain" != "localhost" ] && command -v openssl >/dev/null 2>&1; then
        local cert_info=$(echo | openssl s_client -servername "$matrix_domain" -connect "$matrix_domain":443 2>/dev/null | openssl x509 -noout -dates 2>/dev/null || echo "")

        if [ -n "$cert_info" ]; then
            local expiry_date=$(echo "$cert_info" | grep "notAfter" | cut -d= -f2)
            local expiry_timestamp=$(date -d "$expiry_date" +%s 2>/dev/null || echo "0")
            local current_timestamp=$(date +%s)
            local days_left=$(( (expiry_timestamp - current_timestamp) / 86400 ))

            if [ "$days_left" -lt 7 ]; then
                alert "CRITICAL" "SSL certificate expires in $days_left days"
                ((issues++))
            elif [ "$days_left" -lt 30 ]; then
                alert "WARNING" "SSL certificate expires in $days_left days"
                ((issues++))
            else
                log "✓ SSL certificate: Valid for $days_left days"
            fi
        else
            alert "WARNING" "Could not check SSL certificate"
            ((issues++))
        fi
    fi

    return $issues
}

main() {
    log "=== Health Check Started ==="

    local total_issues=0

    check_critical_services; ((total_issues += $?))
    check_disk_space; ((total_issues += $?))
    check_memory_usage; ((total_issues += $?))
    check_matrix_health; ((total_issues += $?))
    check_network_connectivity; ((total_issues += $?))
    check_security_status; ((total_issues += $?))
    check_certificates; ((total_issues += $?))

    if [ $total_issues -eq 0 ]; then
        log "=== Health Check: All systems healthy ==="
        exit 0
    else
        log "=== Health Check: $total_issues issues found ==="
        exit 1
    fi
}

main "$@"