#!/bin/bash
# Matrix-specific monitoring script
# Generated by Ansible

set -euo pipefail

# Configuration
LOG_FILE="/var/log/monitoring/matrix-monitor.log"
ALERT_SCRIPT="/usr/local/bin/send-alert.sh"
MATRIX_HOME="{{ matrix_synapse_home | default('/var/lib/matrix-synapse') }}"
MATRIX_LOG="{{ matrix_synapse_log | default('/var/log/matrix-synapse/homeserver.log') }}"

log() {
    echo "$(date '+%Y-%m-%d %H:%M:%S') - $1" | tee -a "$LOG_FILE"
}

alert() {
    local level="$1"
    local message="$2"
    log "$level: $message"
    if [ -x "$ALERT_SCRIPT" ]; then
        "$ALERT_SCRIPT" "$level" "$message" "matrix-monitor"
    fi
}

check_matrix_api() {
    log "=== Checking Matrix API ==="
    local issues=0

    # Check federation endpoint
    if command -v curl >/dev/null 2>&1; then
        local federation_response=$(curl -s -o /dev/null -w "%{http_code}" "http://localhost:8008/_matrix/federation/v1/version" 2>/dev/null || echo "000")

        if [ "$federation_response" = "200" ]; then
            log "✓ Matrix federation API: Responding"
        else
            log "✗ Matrix federation API: Not responding (HTTP $federation_response)"
            alert "CRITICAL" "Matrix federation API not responding (HTTP $federation_response)"
            ((issues++))
        fi

        # Check client endpoint
        local client_response=$(curl -s -o /dev/null -w "%{http_code}" "http://localhost:8008/_matrix/client/versions" 2>/dev/null || echo "000")

        if [ "$client_response" = "200" ]; then
            log "✓ Matrix client API: Responding"
        else
            log "✗ Matrix client API: Not responding (HTTP $client_response)"
            alert "CRITICAL" "Matrix client API not responding (HTTP $client_response)"
            ((issues++))
        fi
    else
        log "! curl not available - skipping API checks"
    fi

    return $issues
}

check_matrix_database() {
    log "=== Checking Matrix Database ==="
    local issues=0

    if command -v sudo >/dev/null 2>&1; then
        # Check database connection
        if sudo -u postgres psql -c "SELECT 1;" >/dev/null 2>&1; then
            log "✓ PostgreSQL connection: OK"

            # Check Synapse database exists and is accessible
            if sudo -u postgres psql -d synapse -c "SELECT COUNT(*) FROM users;" >/dev/null 2>&1; then
                log "✓ Synapse database: Accessible"

                # Get user count
                local user_count=$(sudo -u postgres psql -d synapse -t -c "SELECT COUNT(*) FROM users;" 2>/dev/null | xargs || echo "unknown")
                log "Matrix users registered: $user_count"

                # Get room count
                local room_count=$(sudo -u postgres psql -d synapse -t -c "SELECT COUNT(*) FROM rooms;" 2>/dev/null | xargs || echo "unknown")
                log "Matrix rooms created: $room_count"

                # Check for database errors in recent logs
                local db_errors=$(sudo -u postgres psql -d synapse -t -c "SELECT COUNT(*) FROM events WHERE received_ts > extract(epoch from now() - interval '1 hour') * 1000;" 2>/dev/null | xargs || echo "0")
                log "Events in last hour: $db_errors"

            else
                log "✗ Synapse database: Not accessible"
                alert "CRITICAL" "Matrix Synapse database not accessible"
                ((issues++))
            fi

            # Get database size
            local db_size=$(sudo -u postgres psql -c "SELECT pg_size_pretty(pg_database_size('synapse'));" 2>/dev/null | sed -n '3p' | xargs || echo "unknown")
            log "Database size: $db_size"

        else
            log "✗ PostgreSQL connection: Failed"
            alert "CRITICAL" "PostgreSQL connection failed"
            ((issues++))
        fi
    else
        log "! Cannot check database - sudo not available"
    fi

    return $issues
}

check_matrix_storage() {
    log "=== Checking Matrix Storage ==="
    local issues=0

    if [ -d "$MATRIX_HOME" ]; then
        # Check storage size
        local storage_size=$(du -sh "$MATRIX_HOME" 2>/dev/null | awk '{print $1}' || echo "unknown")
        log "Matrix storage size: $storage_size"

        # Check media store
        local media_dir="$MATRIX_HOME/media_store"
        if [ -d "$media_dir" ]; then
            local media_size=$(du -sh "$media_dir" 2>/dev/null | awk '{print $1}' || echo "unknown")
            log "Media store size: $media_size"

            # Check for very large media files (>100MB)
            local large_files=$(find "$media_dir" -type f -size +100M 2>/dev/null | wc -l)
            if [ "$large_files" -gt 0 ]; then
                log "Found $large_files large media files (>100MB)"
                if [ "$large_files" -gt 50 ]; then
                    alert "WARNING" "$large_files large media files found - consider cleanup"
                fi
            fi
        fi

        # Check disk space for Matrix directory
        local matrix_disk_usage=$(df "$(dirname "$MATRIX_HOME")" | awk 'NR==2 {print $(NF-1)}' | sed 's/%//')
        if [ "$matrix_disk_usage" -gt 90 ]; then
            alert "CRITICAL" "Matrix storage filesystem at ${matrix_disk_usage}% capacity"
            ((issues++))
        elif [ "$matrix_disk_usage" -gt 80 ]; then
            alert "WARNING" "Matrix storage filesystem at ${matrix_disk_usage}% capacity"
        fi

    else
        log "✗ Matrix home directory not found: $MATRIX_HOME"
        alert "CRITICAL" "Matrix home directory not found"
        ((issues++))
    fi

    return $issues
}

check_matrix_logs() {
    log "=== Checking Matrix Logs ==="
    local issues=0

    if [ -f "$MATRIX_LOG" ]; then
        # Check for recent errors
        local today=$(date '+%Y-%m-%d')
        local error_count=$(grep -E "(ERROR|CRITICAL)" "$MATRIX_LOG" 2>/dev/null | grep "$today" | wc -l)

        if [ "$error_count" -gt 50 ]; then
            alert "CRITICAL" "$error_count Matrix errors found today"
            ((issues++))
        elif [ "$error_count" -gt 20 ]; then
            alert "WARNING" "$error_count Matrix errors found today"
            ((issues++))
        else
            log "✓ Matrix errors today: $error_count"
        fi

        # Check for specific error patterns
        local db_errors=$(grep -E "(database.*error|connection.*failed)" "$MATRIX_LOG" 2>/dev/null | grep "$today" | wc -l)
        if [ "$db_errors" -gt 5 ]; then
            alert "WARNING" "$db_errors database-related errors in Matrix logs today"
        fi

        local auth_errors=$(grep -E "(authentication.*failed|invalid.*token)" "$MATRIX_LOG" 2>/dev/null | grep "$today" | wc -l)
        if [ "$auth_errors" -gt 20 ]; then
            alert "WARNING" "$auth_errors authentication errors in Matrix logs today"
        fi

        # Check log file size
        local log_size=$(du -sh "$MATRIX_LOG" 2>/dev/null | awk '{print $1}' || echo "unknown")
        log "Matrix log size: $log_size"

        # Check if log is growing (recent entries)
        local recent_entries=$(tail -100 "$MATRIX_LOG" 2>/dev/null | grep "$today" | wc -l)
        if [ "$recent_entries" -eq 0 ]; then
            alert "WARNING" "No recent entries in Matrix log - service may be stopped"
            ((issues++))
        fi

    else
        log "✗ Matrix log file not found: $MATRIX_LOG"
        alert "WARNING" "Matrix log file not found"
        ((issues++))
    fi

    return $issues
}

check_redis_connection() {
    log "=== Checking Redis Connection ==="
    local issues=0

    if command -v redis-cli >/dev/null 2>&1; then
        if redis-cli ping 2>/dev/null | grep -q "PONG"; then
            log "✓ Redis connection: OK"

            # Get Redis memory usage
            local redis_memory=$(redis-cli INFO memory 2>/dev/null | grep "used_memory_human" | cut -d: -f2 | tr -d '\r' || echo "unknown")
            log "Redis memory usage: $redis_memory"

            # Check Redis connected clients
            local connected_clients=$(redis-cli INFO clients 2>/dev/null | grep "connected_clients" | cut -d: -f2 | tr -d '\r' || echo "unknown")
            log "Redis connected clients: $connected_clients"

        else
            log "✗ Redis connection: Failed"
            alert "CRITICAL" "Redis connection failed"
            ((issues++))
        fi
    else
        log "! redis-cli not available - skipping Redis checks"
    fi

    return $issues
}

check_federation_connectivity() {
    log "=== Checking Matrix Federation ==="
    local issues=0

    local matrix_domain="{{ matrix_homeserver_name | default('localhost') }}"

    if [ "$matrix_domain" != "localhost" ] && command -v curl >/dev/null 2>&1; then
        # Test external federation endpoint
        local external_response=$(curl -s -o /dev/null -w "%{http_code}" "https://$matrix_domain/_matrix/federation/v1/version" 2>/dev/null || echo "000")

        if [ "$external_response" = "200" ]; then
            log "✓ External federation endpoint: Responding"
        else
            log "✗ External federation endpoint: Not responding (HTTP $external_response)"
            alert "WARNING" "External Matrix federation not responding (HTTP $external_response)"
            ((issues++))
        fi

        # Test well-known delegation
        local wellknown_response=$(curl -s -o /dev/null -w "%{http_code}" "https://$matrix_domain/.well-known/matrix/server" 2>/dev/null || echo "000")
        if [ "$wellknown_response" = "200" ]; then
            log "✓ .well-known delegation: OK"
        else
            log "! .well-known delegation: HTTP $wellknown_response"
        fi

    else
        log "! Skipping external federation checks (localhost or curl unavailable)"
    fi

    return $issues
}

check_element_web() {
    log "=== Checking Element Web Client ==="
    local issues=0

    # Check if Element is configured and accessible
    if [ -d "/var/www/element" ]; then
        log "✓ Element web directory exists"

        # Check if Element config exists
        if [ -f "/var/www/element/config.json" ]; then
            log "✓ Element configuration found"
        else
            log "! Element configuration not found"
        fi

        # Test Element web interface
        if command -v curl >/dev/null 2>&1; then
            local element_response=$(curl -s -o /dev/null -w "%{http_code}" "http://localhost/_element/" 2>/dev/null || echo "000")
            if [ "$element_response" = "200" ]; then
                log "✓ Element web interface: Accessible"
            else
                log "! Element web interface: HTTP $element_response"
            fi
        fi
    else
        log "! Element web directory not found"
    fi

    return $issues
}

main() {
    log "=== Matrix Monitor Check Started ==="

    local total_issues=0

    check_matrix_api; ((total_issues += $?))
    check_matrix_database; ((total_issues += $?))
    check_matrix_storage; ((total_issues += $?))
    check_matrix_logs; ((total_issues += $?))
    check_redis_connection; ((total_issues += $?))
    check_federation_connectivity; ((total_issues += $?))
    check_element_web; ((total_issues += $?))

    if [ $total_issues -eq 0 ]; then
        log "=== Matrix Monitor: All checks passed ==="
        exit 0
    else
        log "=== Matrix Monitor: $total_issues issues found ==="
        exit 1
    fi
}

main "$@"