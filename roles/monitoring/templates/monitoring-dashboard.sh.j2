#!/bin/bash
# Monitoring dashboard script for Matrix server
# Generated by Ansible

set -euo pipefail

# Configuration
SERVER_NAME="{{ inventory_hostname }}"
REFRESH_INTERVAL=5

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

clear_screen() {
    clear
}

show_header() {
    echo -e "${BLUE}╔══════════════════════════════════════════════════════╗${NC}"
    echo -e "${BLUE}║            Matrix Server Monitoring Dashboard        ║${NC}"
    echo -e "${BLUE}║                 Server: $SERVER_NAME                   ║${NC}"
    echo -e "${BLUE}║               $(date '+%Y-%m-%d %H:%M:%S')                ║${NC}"
    echo -e "${BLUE}╚══════════════════════════════════════════════════════╝${NC}"
    echo
}

show_system_status() {
    echo -e "${BLUE}━━━ System Status ━━━${NC}"

    # CPU usage
    local cpu_usage=$(top -bn1 | grep "Cpu(s)" | awk '{print $2}' | sed 's/%us,//')
    echo -e "CPU Usage: ${cpu_usage}%"

    # Memory usage
    local mem_info=$(free | grep Mem)
    local mem_total=$(echo "$mem_info" | awk '{print $2}')
    local mem_used=$(echo "$mem_info" | awk '{print $3}')
    local mem_percent=$((mem_used * 100 / mem_total))
    echo -e "Memory Usage: ${mem_percent}% (${mem_used}/${mem_total})"

    # Disk usage
    local disk_usage=$(df / | awk 'NR==2 {print $(NF-1)}' | sed 's/%//')
    if [ "$disk_usage" -gt 90 ]; then
        echo -e "Disk Usage: ${RED}${disk_usage}%${NC}"
    elif [ "$disk_usage" -gt 80 ]; then
        echo -e "Disk Usage: ${YELLOW}${disk_usage}%${NC}"
    else
        echo -e "Disk Usage: ${GREEN}${disk_usage}%${NC}"
    fi

    # Load average
    local load_avg=$(uptime | awk -F'load average:' '{print $2}')
    echo -e "Load Average:$load_avg"

    echo
}

show_service_status() {
    echo -e "${BLUE}━━━ Service Status ━━━${NC}"

    local services=(
        "matrix-synapse:Matrix Synapse"
        "caddy:Caddy Web Server"
        "postgresql:PostgreSQL"
        "redis-server:Redis"
{% if fail2ban_enabled | default(true) %}
        "fail2ban:Fail2ban"
{% endif %}
        "ssh:SSH Daemon"
    )

    for service_info in "${services[@]}"; do
        local service_name="${service_info%%:*}"
        local service_desc="${service_info##*:}"

        if systemctl is-active --quiet "$service_name"; then
            echo -e "${GREEN}✓${NC} $service_desc"
        else
            echo -e "${RED}✗${NC} $service_desc"
        fi
    done
    echo
}

show_network_status() {
    echo -e "${BLUE}━━━ Network Status ━━━${NC}"

    # External connectivity
    if ping -c 1 8.8.8.8 >/dev/null 2>&1; then
        echo -e "${GREEN}✓${NC} External connectivity"
    else
        echo -e "${RED}✗${NC} External connectivity"
    fi

    # Matrix federation
    if command -v curl >/dev/null 2>&1; then
        local matrix_response=$(curl -s -o /dev/null -w "%{http_code}" "http://localhost:8008/_matrix/federation/v1/version" 2>/dev/null || echo "000")
        if [ "$matrix_response" = "200" ]; then
            echo -e "${GREEN}✓${NC} Matrix API responding"
        else
            echo -e "${RED}✗${NC} Matrix API not responding (HTTP $matrix_response)"
        fi
    fi

    # Active connections
    local connections=$(netstat -an 2>/dev/null | grep ESTABLISHED | wc -l)
    echo -e "Active connections: $connections"

    echo
}

show_security_status() {
    echo -e "${BLUE}━━━ Security Status ━━━${NC}"

    # Failed SSH attempts today
    local failed_ssh=$(grep "Failed password" /var/log/auth.log 2>/dev/null | grep "$(date '+%b %d')" | wc -l)
    if [ "$failed_ssh" -gt 10 ]; then
        echo -e "${RED}⚠${NC} SSH failed attempts today: $failed_ssh"
    elif [ "$failed_ssh" -gt 5 ]; then
        echo -e "${YELLOW}⚠${NC} SSH failed attempts today: $failed_ssh"
    else
        echo -e "${GREEN}✓${NC} SSH failed attempts today: $failed_ssh"
    fi

    # Fail2ban status
    if command -v fail2ban-client >/dev/null 2>&1; then
        local banned_ips=$(fail2ban-client status sshd 2>/dev/null | grep "Currently banned" | awk '{print $NF}' || echo "0")
        echo -e "Fail2ban banned IPs: $banned_ips"
    fi

    # Firewall status
    if command -v ufw >/dev/null 2>&1; then
        if ufw status | grep -q "Status: active"; then
            echo -e "${GREEN}✓${NC} UFW firewall active"
        else
            echo -e "${RED}✗${NC} UFW firewall inactive"
        fi
    fi

    echo
}

show_matrix_status() {
    echo -e "${BLUE}━━━ Matrix Server Status ━━━${NC}"

    # Matrix database size
    if command -v sudo >/dev/null 2>&1; then
        local db_size=$(sudo -u postgres psql -c "SELECT pg_size_pretty(pg_database_size('synapse'));" 2>/dev/null | sed -n '3p' | xargs || echo "unknown")
        echo -e "Database size: $db_size"
    fi

    # Matrix storage size
    if [ -d "/var/lib/matrix-synapse" ]; then
        local storage_size=$(du -sh /var/lib/matrix-synapse 2>/dev/null | awk '{print $1}' || echo "unknown")
        echo -e "Storage size: $storage_size"
    fi

    # Matrix version
    if [ -f "/opt/venvs/matrix-synapse/bin/python" ]; then
        local matrix_version=$(/opt/venvs/matrix-synapse/bin/python -m synapse.app.homeserver --version 2>/dev/null | head -1 || echo "unknown")
        echo -e "Version: $matrix_version"
    fi

    echo
}

show_footer() {
    echo -e "${BLUE}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${NC}"
    echo -e "Press ${YELLOW}Ctrl+C${NC} to exit | Refreshing every ${REFRESH_INTERVAL} seconds"
}

main() {
    while true; do
        clear_screen
        show_header
        show_system_status
        show_service_status
        show_network_status
        show_security_status
        show_matrix_status
        show_footer

        sleep "$REFRESH_INTERVAL"
    done
}

# Handle Ctrl+C gracefully
trap 'echo -e "\n\nExiting monitoring dashboard..."; exit 0' INT

main "$@"