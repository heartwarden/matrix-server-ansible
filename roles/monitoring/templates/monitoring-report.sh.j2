#!/bin/bash
# Daily monitoring report script for Matrix server
# Generated by Ansible

set -euo pipefail

# Configuration
SERVER_NAME="{{ inventory_hostname }}"
REPORT_EMAIL="{{ monitoring_email | default('root@localhost') }}"
REPORT_FILE="/tmp/monitoring-report-$(date +%Y%m%d).txt"

generate_report() {
    cat > "$REPORT_FILE" << 'REPORT_EOF'
Matrix Server Daily Monitoring Report
=====================================

Server: $SERVER_NAME
Date: $(date '+%Y-%m-%d')
Report Generated: $(date '+%Y-%m-%d %H:%M:%S')

SYSTEM OVERVIEW
===============

Uptime: $(uptime -p)
Load Average: $(uptime | awk -F'load average:' '{print $2}')

System Resources:
$(free -h | grep -E "Mem|Swap")

Disk Usage:
$(df -h | grep -E "^/dev")

RUNNING SERVICES
================

Matrix Synapse: $(systemctl is-active matrix-synapse || echo "STOPPED")
Caddy Web Server: $(systemctl is-active caddy || echo "STOPPED")
PostgreSQL: $(systemctl is-active postgresql || echo "STOPPED")
Redis: $(systemctl is-active redis-server || echo "STOPPED")
REPORT_EOF

{% if fail2ban_enabled | default(true) %}
    echo "Fail2ban: \$(systemctl is-active fail2ban || echo \"STOPPED\")" >> "$REPORT_FILE"
{% endif %}

    cat >> "$REPORT_FILE" << 'REPORT_EOF2'
SSH: $(systemctl is-active ssh || echo "STOPPED")

MATRIX SERVER STATUS
====================

REPORT_EOF2

    # Matrix API check
    if command -v curl >/dev/null 2>&1; then
        local matrix_response=$(curl -s -o /dev/null -w "%{http_code}" "http://localhost:8008/_matrix/federation/v1/version" 2>/dev/null || echo "000")
        echo "Matrix API Status: HTTP $matrix_response" >> "$REPORT_FILE"
    fi

    # Database size
    if command -v sudo >/dev/null 2>&1; then
        local db_size=$(sudo -u postgres psql -c "SELECT pg_size_pretty(pg_database_size('synapse'));" 2>/dev/null | sed -n '3p' | xargs || echo "unknown")
        echo "Database Size: $db_size" >> "$REPORT_FILE"
    fi

    # Storage size
    if [ -d "/var/lib/matrix-synapse" ]; then
        local storage_size=$(du -sh /var/lib/matrix-synapse 2>/dev/null | awk '{print $1}' || echo "unknown")
        echo "Storage Size: $storage_size" >> "$REPORT_FILE"
    fi

    cat >> "$REPORT_FILE" << EOF

SECURITY SUMMARY
================

Failed SSH Attempts Today: $(grep "Failed password" /var/log/auth.log 2>/dev/null | grep "$(date '+%b %d')" | wc -l)
Failed SSH Attempts Yesterday: $(grep "Failed password" /var/log/auth.log 2>/dev/null | grep "$(date -d yesterday '+%b %d')" | wc -l)

EOF

    # Fail2ban status
    if command -v fail2ban-client >/dev/null 2>&1; then
        local banned_ips=$(fail2ban-client status sshd 2>/dev/null | grep "Currently banned" | awk '{print $NF}' || echo "0")
        echo "Currently Banned IPs: $banned_ips" >> "$REPORT_FILE"
    fi

    # UFW status
    if command -v ufw >/dev/null 2>&1; then
        echo "Firewall Status: $(ufw status | head -1)" >> "$REPORT_FILE"
    fi

    cat >> "$REPORT_FILE" << EOF

NETWORK STATUS
==============

External Connectivity: $(ping -c 1 8.8.8.8 >/dev/null 2>&1 && echo "OK" || echo "FAILED")
DNS Resolution: $(nslookup google.com >/dev/null 2>&1 && echo "OK" || echo "FAILED")
Active Connections: $(netstat -an 2>/dev/null | grep ESTABLISHED | wc -l)

RECENT LOG ALERTS
=================

Recent Critical/Error Messages (last 24 hours):
EOF

    # Add recent error messages
    local log_files=("/var/log/syslog" "/var/log/auth.log")
    for log_file in "${log_files[@]}"; do
        if [ -f "$log_file" ]; then
            echo "" >> "$REPORT_FILE"
            echo "From $log_file:" >> "$REPORT_FILE"
            grep -E "(CRITICAL|ERROR|Failed)" "$log_file" 2>/dev/null | grep "$(date '+%b %d')" | tail -10 >> "$REPORT_FILE" || echo "No critical errors found" >> "$REPORT_FILE"
        fi
    done

    # Matrix-specific errors
    if [ -f "/var/log/matrix-synapse/homeserver.log" ]; then
        echo "" >> "$REPORT_FILE"
        echo "Matrix Synapse Errors (today):" >> "$REPORT_FILE"
        grep -E "(ERROR|CRITICAL)" /var/log/matrix-synapse/homeserver.log 2>/dev/null | grep "$(date '+%Y-%m-%d')" | tail -10 >> "$REPORT_FILE" || echo "No Matrix errors found" >> "$REPORT_FILE"
    fi

    cat >> "$REPORT_FILE" << EOF

DISK SPACE TRENDS
=================

Current Disk Usage:
$(df -h | head -1)
$(df -h | grep -E "^/dev")

Large Files (>100MB):
$(find /var/log -type f -size +100M 2>/dev/null | head -10 || echo "No large log files found")

PERFORMANCE METRICS
===================

EOF

    # Add performance data if available
    if command -v iostat >/dev/null 2>&1; then
        echo "I/O Statistics:" >> "$REPORT_FILE"
        iostat -x 1 1 2>/dev/null | tail -n +4 >> "$REPORT_FILE" || echo "I/O stats unavailable" >> "$REPORT_FILE"
    fi

    cat >> "$REPORT_FILE" << EOF

RECOMMENDATIONS
===============

EOF

    # Generate recommendations based on current state
    local recommendations=()

    # Disk space recommendations
    local disk_usage=$(df / | awk 'NR==2 {print $(NF-1)}' | sed 's/%//')
    if [ "$disk_usage" -gt 80 ]; then
        recommendations+=("- URGENT: Disk usage at ${disk_usage}%. Consider cleaning up logs or expanding storage.")
    fi

    # Memory recommendations
    local mem_usage=$(free | awk 'NR==2{printf "%.1f", $3*100/$2}')
    local mem_int=${mem_usage%.*}
    if [ "$mem_int" -gt 85 ]; then
        recommendations+=("- Consider monitoring memory usage. Current usage: ${mem_usage}%")
    fi

    # Security recommendations
    local failed_ssh=$(grep "Failed password" /var/log/auth.log 2>/dev/null | grep "$(date '+%b %d')" | wc -l)
    if [ "$failed_ssh" -gt 20 ]; then
        recommendations+=("- High number of failed SSH attempts ($failed_ssh). Review fail2ban configuration.")
    fi

    # Log cleanup recommendations
    local old_logs=$(find /var/log -name "*.log" -mtime +30 2>/dev/null | wc -l)
    if [ "$old_logs" -gt 10 ]; then
        recommendations+=("- $old_logs log files older than 30 days found. Consider automated cleanup.")
    fi

    if [ ${#recommendations[@]} -eq 0 ]; then
        echo "- No immediate recommendations. System appears healthy." >> "$REPORT_FILE"
    else
        printf '%s\n' "${recommendations[@]}" >> "$REPORT_FILE"
    fi

    cat >> "$REPORT_FILE" << EOF

NEXT MONITORING CYCLE
====================

Next report will be generated: $(date -d "+1 day" '+%Y-%m-%d %H:%M:%S')

For real-time monitoring, run: /usr/local/bin/monitoring-dashboard.sh
For health check, run: /usr/local/bin/health-check.sh
For detailed status, run: /usr/local/bin/monitoring-status.py

---
Generated by Matrix Server Monitoring System
EOF
}

send_report() {
    if command -v mail >/dev/null 2>&1; then
        mail -s "Daily Monitoring Report - $SERVER_NAME" "$REPORT_EMAIL" < "$REPORT_FILE"
        echo "Report sent to $REPORT_EMAIL"
    else
        echo "Warning: mail command not available. Report saved to $REPORT_FILE"
    fi
}

main() {
    echo "Generating daily monitoring report for $SERVER_NAME..."

    generate_report
    send_report

    # Keep report for 7 days
    find /tmp -name "monitoring-report-*.txt" -mtime +7 -delete 2>/dev/null || true

    echo "Monitoring report generation complete."
}

main "$@"