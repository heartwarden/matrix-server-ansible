#!/usr/bin/env python3
"""
Monitoring status endpoint for Matrix server
Generated by Ansible
"""

import json
import subprocess
import psutil
import time
import sys
from datetime import datetime
from pathlib import Path

class MonitoringStatus:
    def __init__(self):
        self.server_name = "{{ inventory_hostname }}"
        self.status = {
            "server": self.server_name,
            "timestamp": datetime.now().isoformat(),
            "uptime": self.get_uptime(),
            "status": "healthy",
            "services": {},
            "system": {},
            "matrix": {},
            "security": {},
            "alerts": []
        }

    def get_uptime(self):
        """Get system uptime in seconds"""
        try:
            with open('/proc/uptime', 'r') as f:
                uptime_seconds = float(f.readline().split()[0])
            return int(uptime_seconds)
        except:
            return 0

    def check_service(self, service_name):
        """Check if a systemd service is running"""
        try:
            result = subprocess.run(
                ['systemctl', 'is-active', service_name],
                capture_output=True,
                text=True,
                timeout=5
            )
            return result.returncode == 0
        except:
            return False

    def check_services(self):
        """Check status of critical services"""
        services = [
            "matrix-synapse",
            "caddy",
            "postgresql",
            "redis-server",
{% if fail2ban_enabled | default(true) %}
            "fail2ban",
{% endif %}
            "ssh"
        ]

        for service in services:
            self.status["services"][service] = {
                "running": self.check_service(service),
                "enabled": self.check_service_enabled(service)
            }

    def check_service_enabled(self, service_name):
        """Check if a systemd service is enabled"""
        try:
            result = subprocess.run(
                ['systemctl', 'is-enabled', service_name],
                capture_output=True,
                text=True,
                timeout=5
            )
            return result.returncode == 0
        except:
            return False

    def get_system_stats(self):
        """Get system resource usage"""
        try:
            # CPU usage
            cpu_percent = psutil.cpu_percent(interval=1)

            # Memory usage
            memory = psutil.virtual_memory()

            # Disk usage
            disk = psutil.disk_usage('/')

            # Load average
            load_avg = psutil.getloadavg()

            self.status["system"] = {
                "cpu_percent": cpu_percent,
                "memory": {
                    "total": memory.total,
                    "used": memory.used,
                    "percent": memory.percent
                },
                "disk": {
                    "total": disk.total,
                    "used": disk.used,
                    "percent": (disk.used / disk.total) * 100
                },
                "load_average": {
                    "1min": load_avg[0],
                    "5min": load_avg[1],
                    "15min": load_avg[2]
                }
            }
        except Exception as e:
            self.add_alert("warning", f"Failed to get system stats: {e}")

    def check_matrix_health(self):
        """Check Matrix server health"""
        try:
            # Check Matrix API
            result = subprocess.run(
                ['curl', '-s', '-o', '/dev/null', '-w', '%{http_code}',
                 'http://localhost:8008/_matrix/federation/v1/version'],
                capture_output=True,
                text=True,
                timeout=10
            )
            api_status = result.stdout.strip() == "200"

            # Get database size
            db_size = "unknown"
            try:
                db_result = subprocess.run(
                    ['sudo', '-u', 'postgres', 'psql', '-c',
                     "SELECT pg_size_pretty(pg_database_size('synapse'));"],
                    capture_output=True,
                    text=True,
                    timeout=10
                )
                if db_result.returncode == 0:
                    lines = db_result.stdout.strip().split('\n')
                    if len(lines) >= 3:
                        db_size = lines[2].strip()
            except:
                pass

            # Get storage size
            storage_size = "unknown"
            try:
                storage_path = Path("/var/lib/matrix-synapse")
                if storage_path.exists():
                    result = subprocess.run(
                        ['du', '-sh', str(storage_path)],
                        capture_output=True,
                        text=True,
                        timeout=30
                    )
                    if result.returncode == 0:
                        storage_size = result.stdout.split()[0]
            except:
                pass

            self.status["matrix"] = {
                "api_responding": api_status,
                "database_size": db_size,
                "storage_size": storage_size
            }

        except Exception as e:
            self.add_alert("warning", f"Failed to check Matrix health: {e}")

    def check_security(self):
        """Check security status"""
        try:
            # Count failed SSH attempts today
            failed_ssh = 0
            try:
                today = datetime.now().strftime('%b %d')
                result = subprocess.run(
                    ['grep', 'Failed password', '/var/log/auth.log'],
                    capture_output=True,
                    text=True,
                    timeout=10
                )
                if result.returncode == 0:
                    failed_ssh = len([line for line in result.stdout.split('\n')
                                    if today in line])
            except:
                pass

            # Check UFW status
            ufw_active = False
            try:
                result = subprocess.run(
                    ['ufw', 'status'],
                    capture_output=True,
                    text=True,
                    timeout=5
                )
                ufw_active = "Status: active" in result.stdout
            except:
                pass

            # Check fail2ban banned IPs
            banned_ips = 0
            try:
                result = subprocess.run(
                    ['fail2ban-client', 'status', 'sshd'],
                    capture_output=True,
                    text=True,
                    timeout=5
                )
                if result.returncode == 0:
                    for line in result.stdout.split('\n'):
                        if "Currently banned" in line:
                            banned_ips = int(line.split()[-1])
                            break
            except:
                pass

            self.status["security"] = {
                "failed_ssh_today": failed_ssh,
                "ufw_active": ufw_active,
                "banned_ips": banned_ips
            }

        except Exception as e:
            self.add_alert("warning", f"Failed to check security status: {e}")

    def add_alert(self, level, message):
        """Add an alert to the status"""
        self.status["alerts"].append({
            "level": level,
            "message": message,
            "timestamp": datetime.now().isoformat()
        })

    def evaluate_health(self):
        """Evaluate overall health status"""
        critical_issues = 0
        warnings = 0

        # Check critical services
        for service, info in self.status.get("services", {}).items():
            if not info.get("running", False):
                critical_issues += 1
                self.add_alert("critical", f"Service {service} is not running")

        # Check disk space
        disk_percent = self.status.get("system", {}).get("disk", {}).get("percent", 0)
        if disk_percent > 95:
            critical_issues += 1
            self.add_alert("critical", f"Disk usage at {disk_percent:.1f}%")
        elif disk_percent > 90:
            warnings += 1
            self.add_alert("warning", f"Disk usage at {disk_percent:.1f}%")

        # Check memory
        memory_percent = self.status.get("system", {}).get("memory", {}).get("percent", 0)
        if memory_percent > 95:
            critical_issues += 1
            self.add_alert("critical", f"Memory usage at {memory_percent:.1f}%")
        elif memory_percent > 90:
            warnings += 1
            self.add_alert("warning", f"Memory usage at {memory_percent:.1f}%")

        # Check Matrix API
        if not self.status.get("matrix", {}).get("api_responding", False):
            critical_issues += 1
            self.add_alert("critical", "Matrix API not responding")

        # Check security
        failed_ssh = self.status.get("security", {}).get("failed_ssh_today", 0)
        if failed_ssh > 50:
            critical_issues += 1
            self.add_alert("critical", f"{failed_ssh} failed SSH attempts today")
        elif failed_ssh > 20:
            warnings += 1
            self.add_alert("warning", f"{failed_ssh} failed SSH attempts today")

        # Set overall status
        if critical_issues > 0:
            self.status["status"] = "critical"
        elif warnings > 0:
            self.status["status"] = "warning"
        else:
            self.status["status"] = "healthy"

    def run(self):
        """Run all checks and return status"""
        try:
            self.check_services()
            self.get_system_stats()
            self.check_matrix_health()
            self.check_security()
            self.evaluate_health()
        except Exception as e:
            self.status["status"] = "error"
            self.add_alert("critical", f"Monitoring script error: {e}")

        return self.status

def main():
    """Main function"""
    monitor = MonitoringStatus()
    status = monitor.run()

    # Output format based on command line argument
    if len(sys.argv) > 1 and sys.argv[1] == "--json":
        print(json.dumps(status, indent=2))
    elif len(sys.argv) > 1 and sys.argv[1] == "--compact":
        print(json.dumps(status))
    else:
        # Human readable format
        print(f"Server: {status['server']}")
        print(f"Status: {status['status'].upper()}")
        print(f"Timestamp: {status['timestamp']}")
        print(f"Uptime: {status['uptime']} seconds")

        if status['alerts']:
            print("\nAlerts:")
            for alert in status['alerts']:
                print(f"  [{alert['level'].upper()}] {alert['message']}")

    # Exit with appropriate code
    if status['status'] == 'critical':
        sys.exit(2)
    elif status['status'] == 'warning':
        sys.exit(1)
    else:
        sys.exit(0)

if __name__ == "__main__":
    main()