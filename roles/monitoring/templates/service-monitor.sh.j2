#!/bin/bash
# Service monitoring script for Matrix server
# Monitors critical services and their health

set -euo pipefail

# Configuration
LOG_FILE="/var/log/service-monitor.log"
ALERT_EMAIL="{{ monitoring_email | default('root@localhost') }}"

# Services to monitor
SERVICES=(
    "matrix-synapse:Matrix Synapse homeserver"
    "caddy:Caddy web server"
    "postgresql:PostgreSQL database"
    "redis-server:Redis cache"
{% if fail2ban_enabled | default(true) %}
    "fail2ban:Intrusion prevention"
{% endif %}
    "ssh:SSH daemon"
    "ufw:Firewall"
)

log() {
    echo "$(date '+%Y-%m-%d %H:%M:%S') - $1" | tee -a "$LOG_FILE"
}

check_service() {
    local service_name="$1"
    local service_desc="$2"

    if systemctl is-active --quiet "$service_name"; then
        log "✓ $service_desc ($service_name): Running"
        return 0
    else
        log "✗ $service_desc ($service_name): STOPPED"
        return 1
    fi
}

check_service_enabled() {
    local service_name="$1"
    local service_desc="$2"

    if systemctl is-enabled --quiet "$service_name" 2>/dev/null; then
        log "✓ $service_desc ($service_name): Enabled"
        return 0
    else
        log "✗ $service_desc ($service_name): NOT ENABLED"
        return 1
    fi
}

check_matrix_health() {
    # Check Matrix health endpoint
    if command -v curl >/dev/null 2>&1; then
        local health_response
        health_response=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:8008/_matrix/federation/v1/version 2>/dev/null || echo "000")

        if [ "$health_response" = "200" ]; then
            log "✓ Matrix API: Responding (HTTP $health_response)"
            return 0
        else
            log "✗ Matrix API: Not responding (HTTP $health_response)"
            return 1
        fi
    else
        log "! curl not available - skipping Matrix API check"
        return 0
    fi
}

check_database_connection() {
    # Check PostgreSQL connection
    if command -v sudo >/dev/null 2>&1; then
        if sudo -u postgres psql -c "SELECT 1;" >/dev/null 2>&1; then
            log "✓ PostgreSQL: Connection OK"
            return 0
        else
            log "✗ PostgreSQL: Connection failed"
            return 1
        fi
    else
        log "! Cannot check PostgreSQL connection"
        return 0
    fi
}

check_ports() {
    local ports=("80:HTTP" "443:HTTPS" "8008:Matrix" "8448:Federation" "{{ ssh_port | default('2222') }}:SSH")
    local issues=0

    for port_info in "${ports[@]}"; do
        local port="${port_info%%:*}"
        local desc="${port_info##*:}"

        if netstat -tuln 2>/dev/null | grep -q ":$port "; then
            log "✓ Port $port ($desc): Listening"
        else
            log "✗ Port $port ($desc): NOT listening"
            ((issues++))
        fi
    done

    return $issues
}

restart_failed_services() {
    local restart_count=0

    for service_info in "${SERVICES[@]}"; do
        local service_name="${service_info%%:*}"
        local service_desc="${service_info##*:}"

        if ! systemctl is-active --quiet "$service_name"; then
            log "Attempting to restart $service_desc ($service_name)..."
            if systemctl restart "$service_name" 2>/dev/null; then
                log "✓ Successfully restarted $service_desc"
                ((restart_count++))
            else
                log "✗ Failed to restart $service_desc"
            fi
        fi
    done

    if [ $restart_count -gt 0 ]; then
        log "Restarted $restart_count services"
    fi

    return $restart_count
}

main() {
    log "=== Service Monitor Check Started ==="

    local issues=0

    # Check service status
    for service_info in "${SERVICES[@]}"; do
        local service_name="${service_info%%:*}"
        local service_desc="${service_info##*:}"

        check_service "$service_name" "$service_desc" || ((issues++))
        check_service_enabled "$service_name" "$service_desc" || ((issues++))
    done

    # Additional health checks
    check_matrix_health || ((issues++))
    check_database_connection || ((issues++))
    check_ports || ((issues++))

    # Attempt to restart failed services if any
    if [ $issues -gt 0 ]; then
        log "Found $issues service issues, attempting repairs..."
        restart_failed_services
    fi

    if [ $issues -gt 0 ]; then
        log "=== Service Monitor: $issues issues found ==="
        exit 1
    else
        log "=== Service Monitor: All services healthy ==="
        exit 0
    fi
}

main "$@"