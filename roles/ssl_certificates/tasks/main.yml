---
- name: Install snapd for certbot
  apt:
    name: snapd
    state: present
    update_cache: yes

- name: Install openssl
  apt:
    name: openssl
    state: present

- name: Remove system certbot if present (to avoid conflicts)
  apt:
    name:
      - certbot
    state: absent
  ignore_errors: yes

- name: Install certbot via snap
  command: snap install --classic certbot
  register: snap_install_result
  changed_when: "'certbot' not in snap_install_result.stderr"
  failed_when: false

- name: Check if snap certbot installation succeeded
  stat:
    path: /snap/bin/certbot
  register: snap_certbot_check

- name: Wait for snap certbot to be available
  wait_for:
    path: /snap/bin/certbot
    timeout: 60
  when: snap_certbot_check.stat.exists

- name: Create certbot symlink
  file:
    src: /snap/bin/certbot
    dest: /usr/bin/certbot
    state: link
    force: yes
  when: snap_certbot_check.stat.exists

- name: Fallback to system certbot if snap failed
  apt:
    name:
      - certbot
      - python3-certbot-apache
    state: present
  when: not snap_certbot_check.stat.exists

- name: Display certbot installation method
  debug:
    msg: "Certbot installed via {{ 'snap' if snap_certbot_check.stat.exists else 'apt' }}"

# Webroot directory not needed for standalone method

- name: Create SSL directories
  file:
    path: "{{ item }}"
    state: directory
    owner: root
    group: root
    mode: '0755'
  loop:
    - "{{ ssl_cert_path }}"
    - "{{ ssl_key_path }}"
    - "{{ ssl_backup_path }}"

- name: Set proper permissions on SSL private key directory
  file:
    path: "{{ ssl_key_path }}"
    mode: '0700'

- name: Check if DH parameters exist
  stat:
    path: "{{ ssl_dhparam_path }}"
  register: dhparam_stat

- name: Generate DH parameters (this may take a while)
  command: "openssl dhparam -out {{ ssl_dhparam_path }} {{ ssl_dhparam_size }}"
  when: not dhparam_stat.stat.exists
  register: dhparam_generation
  async: 3600
  poll: 30

- name: Set DH parameters permissions
  file:
    path: "{{ ssl_dhparam_path }}"
    owner: root
    group: root
    mode: '0644'

- name: Stop Caddy temporarily for standalone certificate generation
  systemd:
    name: caddy
    state: stopped
  when: ssl_domains is defined and ssl_domains | length > 0

- name: Generate Let's Encrypt certificates using standalone method
  command: >
    certbot certonly
    --standalone
    --email {{ ssl_acme_email }}
    --agree-tos
    --non-interactive
    {% if letsencrypt_staging | default(false) %}--staging{% endif %}
    {% for domain in ssl_domains %}-d {{ domain }} {% endfor %}
  register: certbot_result
  when: ssl_domains is defined and ssl_domains | length > 0
  changed_when: "'Congratulations' in certbot_result.stdout"

- name: Start Caddy after certificate generation
  systemd:
    name: caddy
    state: started
  when: ssl_domains is defined and ssl_domains | length > 0

- name: Create certificate renewal script
  template:
    src: ssl-renewal.sh.j2
    dest: /usr/local/bin/ssl-renewal.sh
    owner: root
    group: root
    mode: '0755'
  when: ssl_renewal_enabled

- name: Create certificate renewal cron job
  lineinfile:
    path: /etc/crontab
    line: "{{ ssl_renewal_minute | default('0') }} {{ ssl_renewal_hour | default('2') }} * * * root /usr/local/bin/ssl-renewal.sh >/dev/null 2>&1"
    regexp: ".*/usr/local/bin/ssl-renewal.sh.*"
    state: present
  when: ssl_renewal_enabled | default(true)

- name: Create certificate backup script
  template:
    src: ssl-backup.sh.j2
    dest: /usr/local/bin/ssl-backup.sh
    owner: root
    group: root
    mode: '0755'
  when: ssl_backup_enabled | default(true)

- name: Create certificate backup cron job
  lineinfile:
    path: /etc/crontab
    line: "15 2 * * * root /usr/local/bin/ssl-backup.sh >/dev/null 2>&1"
    regexp: ".*/usr/local/bin/ssl-backup.sh.*"
    state: present
  when: ssl_backup_enabled | default(true)

- name: Set up certificate monitoring
  template:
    src: ssl-monitor.sh.j2
    dest: /usr/local/bin/ssl-monitor.sh
    owner: root
    group: root
    mode: '0755'

- name: Create certificate monitoring cron job
  lineinfile:
    path: /etc/crontab
    line: "0 6 * * * root /usr/local/bin/ssl-monitor.sh >/dev/null 2>&1"
    regexp: ".*/usr/local/bin/ssl-monitor.sh.*"
    state: present

- name: Create post-renewal hook directory
  file:
    path: /etc/letsencrypt/renewal-hooks/post
    state: directory
    owner: root
    group: root
    mode: '0755'

- name: Create post-renewal hook for Caddy
  template:
    src: post-renewal-caddy.sh.j2
    dest: /etc/letsencrypt/renewal-hooks/post/caddy
    owner: root
    group: root
    mode: '0755'

- name: Verify certificate installation
  command: "openssl x509 -in /etc/letsencrypt/live/{{ ssl_domains[0] }}/cert.pem -text -noout"
  register: cert_verification
  when: ssl_domains is defined and ssl_domains | length > 0
  changed_when: false
  failed_when: cert_verification.rc != 0

- name: Display certificate information
  debug:
    msg: "Certificate successfully installed for domains: {{ ssl_domains | join(', ') }}"
  when: ssl_domains is defined and ssl_domains | length > 0