---
- name: Remove default users if requested
  user:
    name: "{{ item }}"
    state: absent
    remove: yes
  loop: "{{ default_users_to_remove }}"
  when: remove_default_users
  ignore_errors: yes

- name: Create admin user
  user:
    name: "{{ admin_username }}"
    groups: "{{ admin_user_groups }}"
    shell: /bin/bash
    create_home: yes
    home: "/home/{{ admin_username }}"
    state: present

- name: Set home directory permissions
  file:
    path: "/home/{{ admin_username }}"
    mode: "{{ home_directory_mode }}"
    owner: "{{ admin_username }}"
    group: "{{ admin_username }}"

- name: Create .ssh directory
  file:
    path: "/home/{{ admin_username }}/.ssh"
    state: directory
    owner: "{{ admin_username }}"
    group: "{{ admin_username }}"
    mode: '0700'

- name: Check if SSH private key already exists
  stat:
    path: "/home/{{ admin_username }}/.ssh/id_{{ ssh_key_type }}"
  register: ssh_private_key_check
  when: ssh_public_key == ""

- name: Generate SSH key pair if not provided
  command: >
    ssh-keygen -t {{ ssh_key_type }}
    {% if ssh_key_type == 'rsa' %}-b {{ ssh_key_bits }}{% endif %}
    -f "/home/{{ admin_username }}/.ssh/id_{{ ssh_key_type }}"
    -N ""
    -C "{{ admin_username }}@{{ inventory_hostname }}"
  become_user: "{{ admin_username }}"
  when:
    - ssh_public_key == ""
    - not ssh_private_key_check.stat.exists
  register: ssh_keygen_result

- name: Set ownership of generated SSH keys
  file:
    path: "{{ item }}"
    owner: "{{ admin_username }}"
    group: "{{ admin_username }}"
    mode: "{{ '0600' if item.endswith('id_' + ssh_key_type) else '0644' }}"
  loop:
    - "/home/{{ admin_username }}/.ssh/id_{{ ssh_key_type }}"
    - "/home/{{ admin_username }}/.ssh/id_{{ ssh_key_type }}.pub"
  when:
    - ssh_public_key == ""
    - ssh_keygen_result is defined and ssh_keygen_result.changed

- name: Read generated public key
  slurp:
    src: "/home/{{ admin_username }}/.ssh/id_{{ ssh_key_type }}.pub"
  register: generated_public_key_content
  when:
    - ssh_public_key == ""
    - ssh_keygen_result is defined and ssh_keygen_result.changed

- name: Set generated public key fact
  set_fact:
    generated_keypair:
      public_key: "{{ generated_public_key_content.content | b64decode | trim }}"
  when:
    - ssh_public_key == ""
    - generated_public_key_content is defined

- name: Check if root authorized_keys exists
  stat:
    path: /root/.ssh/authorized_keys
  register: root_authorized_keys

- name: Copy root authorized_keys to admin user if no key provided
  copy:
    src: /root/.ssh/authorized_keys
    dest: "/home/{{ admin_username }}/.ssh/authorized_keys"
    owner: "{{ admin_username }}"
    group: "{{ admin_username }}"
    mode: '0600'
    remote_src: yes
  when:
    - ssh_public_key == ""
    - generated_keypair is not defined
    - root_authorized_keys.stat.exists

- name: Create authorized_keys file
  file:
    path: "/home/{{ admin_username }}/.ssh/authorized_keys"
    state: touch
    owner: "{{ admin_username }}"
    group: "{{ admin_username }}"
    mode: '0600'

- name: Set up authorized_keys with provided public key
  copy:
    content: "{{ ssh_public_key }}\n"
    dest: "/home/{{ admin_username }}/.ssh/authorized_keys"
    owner: "{{ admin_username }}"
    group: "{{ admin_username }}"
    mode: '0600'
  when: ssh_public_key != ""

- name: Set up authorized_keys with generated public key
  copy:
    content: "{{ generated_keypair.public_key }}\n"
    dest: "/home/{{ admin_username }}/.ssh/authorized_keys"
    owner: "{{ admin_username }}"
    group: "{{ admin_username }}"
    mode: '0600'
  when: ssh_public_key == "" and generated_keypair is defined

- name: Configure sudo for admin user
  template:
    src: sudoers.j2
    dest: "/etc/sudoers.d/{{ admin_username }}"
    owner: root
    group: root
    mode: '0440'
    validate: 'visudo -cf %s'

- name: Create SSH banner
  copy:
    content: "{{ ssh_banner_text }}"
    dest: /etc/ssh/banner
    owner: root
    group: root
    mode: '0644'
  when: ssh_banner_enabled
  notify: restart ssh

- name: Configure SSH daemon (initial safe configuration)
  template:
    src: sshd_config_safe.j2
    dest: /etc/ssh/sshd_config
    owner: root
    group: root
    mode: '0644'
    backup: yes
  notify: restart ssh

- name: Flush handlers to restart SSH with new configuration
  meta: flush_handlers

- name: Wait for SSH to be available on new port
  wait_for:
    port: "{{ ssh_port }}"
    host: "{{ ansible_default_ipv4.address }}"
    delay: 5
    timeout: 30
  when: ssh_port != 22

- name: Test SSH connection for admin user
  local_action: "shell ssh -o ConnectTimeout=10 -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -p {{ ssh_port }} {{ admin_username }}@{{ ansible_host | default(inventory_hostname) }} 'echo SSH_CONNECTION_TEST_SUCCESS'"
  register: ssh_test_result
  ignore_errors: yes
  when: ansible_connection != 'local'

- name: Display SSH test results
  debug:
    msg: |
      SSH Test Results:
      - Return code: {{ ssh_test_result.rc | default('N/A - local connection') }}
      - Output: {{ ssh_test_result.stdout | default('N/A - local connection') }}

      {% if ssh_test_result.rc is defined and ssh_test_result.rc == 0 %}
      ✅ SUCCESS: zerokaine user SSH access verified!
      {% elif ansible_connection == 'local' %}
      ℹ️  Local deployment - SSH test skipped
      {% else %}
      ❌ WARNING: SSH test failed - keeping root access enabled for safety
      {% endif %}

- name: Apply final SSH hardening (disable root login)
  lineinfile:
    path: /etc/ssh/sshd_config
    regexp: '^#?PermitRootLogin'
    line: 'PermitRootLogin no'
    state: present
  when:
    - disable_root_login
    - ansible_connection == 'local' or (ssh_test_result.rc is defined and ssh_test_result.rc == 0)
  notify: restart ssh

- name: Apply final SSH hardening (disable password authentication)
  lineinfile:
    path: /etc/ssh/sshd_config
    regexp: '^#?PasswordAuthentication'
    line: 'PasswordAuthentication no'
    state: present
  when:
    - disable_password_auth
    - ansible_connection == 'local' or (ssh_test_result.rc is defined and ssh_test_result.rc == 0)
  notify: restart ssh

- name: Display security warning if SSH test failed
  debug:
    msg: |
      ⚠️  SECURITY WARNING ⚠️

      SSH test for user '{{ admin_username }}' failed!
      Root login has NOT been disabled for safety.

      Please manually verify SSH access before disabling root:
      1. Test SSH connection: ssh -p {{ ssh_port }} {{ admin_username }}@{{ inventory_hostname }}
      2. If successful, manually disable root login:
         sudo sed -i 's/^#\?PermitRootLogin.*/PermitRootLogin no/' /etc/ssh/sshd_config
         sudo systemctl restart ssh
      3. Lock root account: sudo passwd -l root
  when:
    - ansible_connection != 'local'
    - ssh_test_result.rc is defined
    - ssh_test_result.rc != 0

- name: Create bash configuration for admin user
  template:
    src: bashrc.j2
    dest: "/home/{{ admin_username }}/.bashrc"
    owner: "{{ admin_username }}"
    group: "{{ admin_username }}"
    mode: '0644'
    backup: yes
  when: bash_customization_enabled

- name: Create bash aliases for admin user
  template:
    src: bash_aliases.j2
    dest: "/home/{{ admin_username }}/.bash_aliases"
    owner: "{{ admin_username }}"
    group: "{{ admin_username }}"
    mode: '0644'
  when: bash_customization_enabled

- name: Set environment variables for admin user
  template:
    src: bash_profile.j2
    dest: "/home/{{ admin_username }}/.bash_profile"
    owner: "{{ admin_username }}"
    group: "{{ admin_username }}"
    mode: '0644'
  when: bash_customization_enabled

- name: Create matrix management scripts directory
  file:
    path: "/home/{{ admin_username }}/scripts"
    state: directory
    owner: "{{ admin_username }}"
    group: "{{ admin_username }}"
    mode: '0755'

- name: Create matrix management wrapper scripts
  template:
    src: "{{ item.src }}"
    dest: "/home/{{ admin_username }}/scripts/{{ item.dest }}"
    owner: "{{ admin_username }}"
    group: "{{ admin_username }}"
    mode: '0755'
  loop:
    - { src: 'matrix-status.sh.j2', dest: 'matrix-status' }
    - { src: 'matrix-logs.sh.j2', dest: 'matrix-logs' }
    - { src: 'matrix-restart.sh.j2', dest: 'matrix-restart' }
    - { src: 'matrix-backup.sh.j2', dest: 'matrix-backup' }
    - { src: 'system-info.sh.j2', dest: 'system-info' }

- name: Add scripts directory to PATH
  lineinfile:
    path: "/home/{{ admin_username }}/.bashrc"
    line: 'export PATH="$HOME/scripts:$PATH"'
    state: present
  when: bash_customization_enabled

- name: Create motd for admin user
  template:
    src: motd.j2
    dest: /etc/motd
    owner: root
    group: root
    mode: '0644'

- name: Lock root account
  user:
    name: root
    password_lock: yes
  when: disable_root_login

- name: Display SSH key information
  debug:
    msg: |
      Admin user '{{ admin_username }}' created successfully!

      {% if ssh_public_key == "" and generated_keypair is defined %}
      SSH key pair generated automatically.
      Private key: /home/{{ admin_username }}/.ssh/id_{{ ssh_key_type }}
      Public key: /home/{{ admin_username }}/.ssh/id_{{ ssh_key_type }}.pub

      Copy the private key to your local machine to connect:
      scp {{ admin_username }}@{{ inventory_hostname }}:.ssh/id_{{ ssh_key_type }} ~/.ssh/{{ inventory_hostname }}_{{ ssh_key_type }}
      ssh -i ~/.ssh/{{ inventory_hostname }}_{{ ssh_key_type }} {{ admin_username }}@{{ inventory_hostname }}
      {% endif %}

      Management scripts available in ~/scripts/:
      - matrix-status: Check Matrix server status
      - matrix-logs: View Matrix server logs
      - matrix-restart: Restart Matrix services
      - matrix-backup: Create system backup
      - system-info: Display system information