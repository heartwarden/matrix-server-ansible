#!/bin/bash
# Vault Helper - Creates properly encrypted Ansible vault files

create_vault_file() {
    local environment="$1"
    local ssl_email="$2"
    local admin_username="$3"
    local admin_password="$4"
    local db_password="$5"
    local form_secret="$6"
    local macaroon_secret="$7"
    local registration_secret="$8"
    local coturn_secret="$9"

    local vault_dir="inventory/$environment/group_vars/all"
    local vault_file="$vault_dir/vault.yml"

    mkdir -p "$vault_dir"

    # Create temporary unencrypted vault content
    cat > "/tmp/vault_content.yml" << EOF
---
# Encrypted secrets for $environment environment
# Generated by TUI Configuration Wizard

vault_ssl_email: "$ssl_email"
vault_admin_username: "$admin_username"
vault_admin_password: "$admin_password"

# Database secrets
vault_matrix_database_password: "$db_password"

# Matrix secrets
vault_form_secret: "$form_secret"
vault_macaroon_secret_key: "$macaroon_secret"
vault_registration_secret: "$registration_secret"
vault_coturn_secret: "$coturn_secret"
EOF

    # Encrypt the vault file
    if [ -f ".vault_pass" ]; then
        ansible-vault encrypt "/tmp/vault_content.yml" --vault-password-file .vault_pass --output "$vault_file" 2>/dev/null
        if [ $? -ne 0 ]; then
            # Fallback: create vault file directly
            echo "Warning: ansible-vault encrypt failed, creating vault file directly"
            VAULT_PASS=$(cat .vault_pass)
            ansible-vault create "$vault_file" --vault-password-file .vault_pass <<< "$(cat /tmp/vault_content.yml)" 2>/dev/null
            if [ $? -ne 0 ]; then
                # Final fallback: manual vault creation
                echo "$VAULT_PASS" | ansible-vault encrypt_string --vault-id default@.vault_pass --stdin-name 'vault_content' > "$vault_file" <<< "$(cat /tmp/vault_content.yml)"
            fi
        fi
    else
        echo "Error: .vault_pass file not found"
        return 1
    fi

    # Clean up
    rm -f "/tmp/vault_content.yml"

    return 0
}

# If called directly, use command line arguments
if [ "${BASH_SOURCE[0]}" == "${0}" ]; then
    create_vault_file "$@"
fi